server:
  #port: ${random.int[9000,9999]}
  port: 2000
  servlet:
    context-path:
spring:
  rabbitmq:
    username: springcloud
    password: springcloud
  cloud:
    stream:
      bindings:
        output:
          destination: springCloud
          group: output
    loadbalancer:
      # 开启服务重试机制
      retry:
        enabled: true
  sleuth:
    web:
      client:
        enabled: true
    sampler:
      probability: 1.0 # 将采样比例设置为 1.0，也就是全部都需要。默认是 0.1
  zipkin:
    base-url: http://localhost:9412
  resources:
    static-locations: classpath:/static/
  mvc:
    view:
      prefix: /
      suffix: .html
  application:
    name: producer
  boot:
    admin:
      client:
        url: http://localhost:12000
  # 数据源
  datasource:
    type: com.alibaba.druid.pool.xa.DruidXADataSource
    druid:
      url: jdbc:mysql://localhost:3306/database
      username: root
      password: 123456
      # 可不配置,根据url自动识别
      driver-class-name: com.mysql.jdbc.Driver
      connect-properties:
        useSSL: false
        useUnicode: true
        useJDBCCompliantTimezoneShift: true
        useLegacyDatetimeCode: false
        serverTimezone: UTC
        characterEncoding: utf8
      # 初始化时建立链接数
      initialSize: 10
      # 最小连接池数量
      minIdle: 10
      # 最大连接池数量
      maxActive: 50
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 30000
      # 校验链接SQL
      validationQuery: SELECT 1
      validationQueryTimeout: 10000
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      testOnBorrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
      testOnReturn: false
      # Spring监控AOP切入点
      aop-patterns: com.hks.producer.controller.*
      # 打开PSCache，并且指定每个连接上PSCache的大小,对支持游标的数据库性能提升巨大,在mysql下建议关闭。
      poolPreparedStatements: false
      # 大于零时自动启动poolPreparedStatements
      maxPoolPreparedStatementPerConnectionSize: 0
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: true
      # 配置前端显示监控页面
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: true
        login-username: hks
        login-password: hks
        # 配置运行访问的IP
        allow:
        # 配置不运行访问的IP
        deny:
      filter:
        # stat(监控统计)
        stat:
          enabled: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 5000
          # 合并参数SQL
          merge-sql: true
        # 日志
        log4j2:
          # 输出可直接执行的SQL
          statement-executable-sql-log-enable: true
        # 防御sql注入
        wall:
          enabled: true
  thymeleaf:
    mode: HTML
    cache: false
# mybatis
mybatis:
  # xml文件位置
  mapper-locations: classpath:mapper/*.xml
  # 实体类包位置
  type-aliases-package: com.hks.producer.entity
  configuration-properties:
    dialect: mysql
# 集成log4j2
logging:
  config: classpath:configuration/log4j2.xml
#actuator
management:
  endpoints:
    web:
      exposure:
        #actuator 显示所有的信息
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS
hystrix:
  collapser:
    default:
      timerDelayInMilliseconds: 1000
eureka:
  client:
    serviceUrl:
      defaultZone: http://peer1:1000/eureka/
    # 获取服务清单后,默认缓存30s
    registry-fetch-interval-seconds: 30
    # 设置客户端所属的region
    #reginon
    # 开启心跳检测
    healthcheck:
      enabled: true
  instance:
    # 定义服务失效的时间
    lease-expiration-duration-in-seconds: 90
    # 定义服务续约任务的调用间隔时间
    lease-renewal-interval-in-seconds: 30
    # eureka注册中心点击实例时跳转的链接
    status-page-url-path: /actuator/info
    # eureka注册中心做服务健康检查地址
    health-check-url-path: /actuator/health
